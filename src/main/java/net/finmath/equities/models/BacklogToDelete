LNSVQDModelAnalyticalPricer

// 1. For ODE-solution
	public final int numStepsForODEIntegration = 599;
	public final int numStepsForODEIntegrationPerUnitTime = 100;

	// 2. Gauss-Laguerre quadrature; GL = for Gauss-Legendre

	// GL params
	public final double lowerBound = 0;
	public final double upperBound = 20;
	int numberOfPointsGL = 10; // Number of integration points for Legendre-Gauss quadrature
	double relativeAccuracyGL = 1.0e-6;
	double absoluteAccuracyGL = 1.0e-9;
	int minIterationsGL = 10;
	int maxIterationsGL = 1000;
	public final double[] solutionsToLegendrePolynomials = new double[numberOfPointsGL];
	/*IterativeLegendreGaussIntegrator integratorInfiniteIntegral = new IterativeLegendreGaussIntegrator(
			numberOfPointsGL, relativeAccuracyGL, absoluteAccuracyGL, minIterationsGL, maxIterationsGL);*/
	/*MidPointIntegrator integratorInfiniteIntegral = new MidPointIntegrator(
			relativeAccuracyGL, absoluteAccuracyGL, minIterationsGL, maxIterationsGL);*/
	/*GaussIntegratorFactory gaussIntegratorFactory = new GaussIntegratorFactory();
	GaussIntegrator hermite = gaussIntegratorFactory.hermite(numberOfPointsGL);*/
	// SimpsonIntegrator simpsonIntegrator = new SimpsonIntegrator();

	private void setTargetSurface() {
    		// Initialize volatilityPoints
    		ArrayList<VolatilityPoint> volatilityPoints = new ArrayList<>();

    		// Create and adf volatility points
    		volatilityPoints.add(makeVolatilityPoint("2024-10-18", 0.60, 0.6097, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2024-10-18", 0.80, 0.3665, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2024-10-18", 1.00, 0.1374, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2024-10-18", 1.20, 0.212, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2024-10-18", 1.40, 0.319, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2024-11-15", 0.60, 0.476, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2024-11-15", 0.80, 0.3061, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2024-11-15", 1.00, 0.1508, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2024-11-15", 1.20, 0.1568, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2024-11-15", 1.40, 0.2238, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2024-12-20", 0.60, 0.4171, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2024-12-20", 0.80, 0.2762, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2024-12-20", 1.00, 0.1493, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2024-12-20", 1.20, 0.1359, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2024-12-20", 1.40, 0.1878, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-03-21", 0.60, 0.3471, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-03-21", 0.80, 0.2427, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-03-21", 1.00, 0.1511, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-03-21", 1.20, 0.1162, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-03-21", 1.40, 0.1464, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-06-20", 0.60, 0.3159, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-06-20", 0.80, 0.2289, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-06-20", 1.00, 0.1545, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-06-20", 1.20, 0.1164, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-06-20", 1.40, 0.1341, spot0));
    		/*volatilityPoints.add(makeVolatilityPoint("2025-09-19", 0.60, 0.3028, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-09-19", 0.80, 0.2239, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-09-19", 1.00, 0.1575, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-09-19", 1.20, 0.1198, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-09-19", 1.40, 0.1307, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-12-19", 0.60, 0.2908, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-12-19", 0.80, 0.2204, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-12-19", 1.00, 0.1625, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-12-19", 1.20, 0.1279, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2025-12-19", 1.40, 0.1322, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2026-06-19", 0.60, 0.2725, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2026-06-19", 0.80, 0.2127, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2026-06-19", 1.00, 0.1645, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2026-06-19", 1.20, 0.1331, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2026-06-19", 1.40, 0.1296, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2026-12-18", 0.60, 0.2649, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2026-12-18", 0.80, 0.2104, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2026-12-18", 1.00, 0.167, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2026-12-18", 1.20, 0.1383, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2026-12-18", 1.40, 0.1321, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2027-06-18", 0.60, 0.2584, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2027-06-18", 0.80, 0.2087, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2027-06-18", 1.00, 0.1694, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2027-06-18", 1.20, 0.1424, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2027-06-18", 1.40, 0.1333, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2027-12-17", 0.60, 0.2544, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2027-12-17", 0.80, 0.2079, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2027-12-17", 1.00, 0.1714, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2027-12-17", 1.20, 0.1458, spot0));
    		volatilityPoints.add(makeVolatilityPoint("2027-12-17", 1.40, 0.1351, spot0));*/

    		// Create volatility surface
    		volatilityPointsSurface = new VolatilityPointsSurface(volatilityPoints, valuationDate, dayCountConvention);
    	}

/*@Test
	public void testDependencyOnDiscretization() throws Exception {
		// Set the right case
		ArrayList<Pair<Double, Double>> strikeMatPairs = setDAXHestonSetupSIM(); //setBTCSetupSIM(); // setDAXHestonSetupSIM();

		// Get option values
		int numStrikesPerMaturity = strikeMatPairs.size() / maturityGrid.length;

		List<Integer> seeds = IntStream.range(1, 6).boxed().collect(Collectors.toList());

		double[][][] pricesMC = new double[seeds.size()][maturityGrid.length][numStrikesPerMaturity];
		double[][][] pricesQMC = new double[seeds.size()][maturityGrid.length][numStrikesPerMaturity];

		for(int seed : seeds) {
			double maxMaturity = strikeMatPairs.get(strikeMatPairs.size() - 1).getKey();
			double[] timeGrid = LNSVQDUtils.addTimePointsToArray(maturityGrid,
							(int) (Math.round(maxMaturity * 365.) * seed), 0, maxMaturity, true)
					.stream().distinct().mapToDouble(Double::doubleValue).toArray();

			LNSVQDPathSimulatorMC lnsvqdPriceSimulator = new LNSVQDPathSimulatorMC(lnsvqdModelAnalyticalPricer, numberOfPaths, timeGrid, maturityGrid, false);
			lnsvqdPriceSimulator.precalculatePaths(5603, true);

			LNSVQDPathSimulatorQMC lnsvqdPriceSimulatorQMC = new LNSVQDPathSimulatorQMC(lnsvqdModelAnalyticalPricer, numberOfPaths, timeGrid, maturityGrid, false);
			// lnsvqdPriceSimulatorQMC.precalculatePaths(5603);

			for(int m = 0; m < maturityGrid.length; m++) {
				for(int s = 0; s < numStrikesPerMaturity; s++) {
					double maturity = strikeMatPairs.get(m * numStrikesPerMaturity + s).getKey();
					double strike = strikeMatPairs.get(m * numStrikesPerMaturity + s).getValue();

					double simulatedOptionPrice;
					try {
						simulatedOptionPrice = lnsvqdPriceSimulator.getEuropeanPriceAuto(strike, maturity);
					} catch(AssertionError e) {
						System.err.println("Caught AssertionError: " + e.getMessage());
						simulatedOptionPrice = 1000000;
					}
					pricesMC[seeds.indexOf(seed)][m][s] = simulatedOptionPrice;

					// QMC
					double simulatedOptionPriceQMC;
					try {
						simulatedOptionPriceQMC = 0; // lnsvqdPriceSimulatorQMC.getEuropeanPriceAuto(strike, maturity);
					} catch(AssertionError e) {
						System.err.println("Caught AssertionError: " + e.getMessage());
						simulatedOptionPriceQMC = 1000000;
					}
					pricesQMC[seeds.indexOf(seed)][m][s] = simulatedOptionPriceQMC;
				}
			}
			System.out.println("Finished seed " + seed);
		}

		for(int m = 0; m < maturityGrid.length; m++) {
			for(int s = 0; s < numStrikesPerMaturity; s++) {
				double maturity = strikeMatPairs.get(m * numStrikesPerMaturity + s).getKey();
				double strike = strikeMatPairs.get(m * numStrikesPerMaturity + s).getValue();

				double[] pricesMCForPair = new double[seeds.size()];
				double[] pricesQMCForPair = new double[seeds.size()];
				for(int j = 0; j < seeds.size(); j++) {
					pricesMCForPair[j] = lnsvqdModelAnalyticalPricer.getImpliedVolFromPrice(strike, maturity, pricesMC[j][m][s]);
					pricesQMCForPair[j] = lnsvqdModelAnalyticalPricer.getImpliedVolFromPrice(strike, maturity, pricesQMC[j][m][s]);
				}
				LNSVQDUtils.printArray(pricesMCForPair);
				LNSVQDUtils.printArray(pricesQMCForPair);
			}
		}
	}*/

	/*@Test
	public void printTransformedVolPathMoments() throws CalculationException {
		int numberOfPaths = 100000;
		// Get option values
		double maturity = 1.2;
		double[] timeGrid = LNSVQDUtils.createTimeGrid(0.,
				maturity, (int) Math.round(maturity * 365.));

		int seed = 1;

		LNSVQDEuropeanPriceSimulator lnsvqdCallPriceSimulator = new LNSVQDEuropeanPriceSimulator(lnsvqdModelAnalyticalPricer, numberOfPaths, timeGrid, false);
		lnsvqdCallPriceSimulator.precalculatePaths(seed);
		double[][][] transformedPaths = lnsvqdCallPriceSimulator.getTransformedPath();

		for(int j = 0; j < timeGrid.length; j++) {
			double moment1 = Arrays.stream(transformedPaths[1][j]).map(x -> Math.pow(x, 1)).average().getAsDouble();
			double moment2 = Arrays.stream(transformedPaths[1][j]).map(x -> Math.pow(x, 2)).average().getAsDouble();
			double moment3 = Arrays.stream(transformedPaths[1][j]).map(x -> Math.pow(x, 3)).average().getAsDouble();
			double moment4 = Arrays.stream(transformedPaths[1][j]).map(x -> Math.pow(x, 4)).average().getAsDouble();
			double moment5 = Arrays.stream(transformedPaths[1][j]).map(x -> Math.pow(x, 5)).average().getAsDouble();
			double moment6 = Arrays.stream(transformedPaths[1][j]).map(x -> Math.pow(x, 6)).average().getAsDouble();
			System.out.println(timeGrid[j] +
					"\t" + moment1 +
					"\t" + moment2 +
					"\t" + moment3 +
					"\t" + moment4 +
					"\t" + moment5 +
					"\t" + moment6);
		}
	}*/